{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Marcus\\\\Desktop\\\\Projects\\\\Website\\\\client\\\\components\\\\Table\\\\FetchGithub.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nrequire('isomorphic-fetch');\n\nimport ReactTable from \"react-table\";\nvar values = [];\nvar query = \"\\nquery {\\n  user(login: \\\"marcusfooo\\\") {\\n    repositories(first: 100, isFork: false) {\\n      nodes {\\n        name\\n        description\\n        url\\n        primaryLanguage {name}\\n      }\\n    }\\n  }\\n}\\n\";\nvar url = \"https://api.github.com/graphql\";\nauth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\";\nvar values = [];\nexport var GithubTable = /*#__PURE__*/function (_React$Component) {\n  _inherits(GithubTable, _React$Component);\n\n  var _super = _createSuper(GithubTable);\n\n  function GithubTable() {\n    var _this;\n\n    _classCallCheck(this, GithubTable);\n\n    _this = _super.call(this);\n    _this.state = {\n      data: makeData()\n    };\n    return _this;\n  }\n\n  _createClass(GithubTable, [{\n    key: \"render\",\n    value: function render() {\n      var data = this.state.data;\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }\n      }, __jsx(ReactTable, {\n        data: data,\n        columns: [{\n          Header: \"Name\",\n          columns: [{\n            Header: \"First Name\",\n            accessor: \"firstName\"\n          }, {\n            Header: \"Last Name\",\n            id: \"lastName\",\n            accessor: function accessor(d) {\n              return d.lastName;\n            }\n          }]\n        }, {\n          Header: \"Info\",\n          columns: [{\n            Header: \"Age\",\n            accessor: \"age\"\n          }, {\n            Header: \"Status\",\n            accessor: \"status\"\n          }]\n        }, {\n          Header: 'Stats',\n          columns: [{\n            Header: \"Visits\",\n            accessor: \"visits\"\n          }]\n        }],\n        defaultPageSize: 10,\n        className: \"-striped -highlight\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }), __jsx(Tips, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }), __jsx(Logo, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return GithubTable;\n}(React.Component);\n\nfunction fetchGithub(url, query, auth) {\n  var res, values;\n  return _regeneratorRuntime.async(function fetchGithub$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(url, {\n            method: 'POST',\n            headers: {\n              'Authorization': 'Bearer ' + auth,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              query: query\n            })\n          }));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 10;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('Http error', _context.t0);\n          return _context.abrupt(\"return\", res.status(500).send());\n\n        case 10:\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 12:\n          res = _context.sent;\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(res.data.user.repositories.nodes);\n\n        case 15:\n          values = _context.sent;\n          console.log(values);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}","map":{"version":3,"sources":["C:/Users/Marcus/Desktop/Projects/Website/client/components/Table/FetchGithub.js"],"names":["require","ReactTable","values","query","url","auth","GithubTable","state","data","makeData","Header","columns","accessor","id","d","lastName","React","Component","fetchGithub","fetch","method","headers","body","JSON","stringify","res","console","log","status","send","json","user","repositories","nodes"],"mappings":"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","sourcesContent":["require('isomorphic-fetch');\r\nimport ReactTable from \"react-table\"\r\n\r\nvar values = []\r\n\r\nconst query = `\r\nquery {\r\n  user(login: \"marcusfooo\") {\r\n    repositories(first: 100, isFork: false) {\r\n      nodes {\r\n        name\r\n        description\r\n        url\r\n        primaryLanguage {name}\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst url = \"https://api.github.com/graphql\";\r\nauth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\"\r\nvar values = []\r\n\r\n\r\n\r\nexport class GithubTable extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: makeData()\r\n    };\r\n  }\r\n  render() {\r\n    const { data } = this.state;\r\n    return (\r\n      <div>\r\n        <ReactTable\r\n          data={data}\r\n          columns={[\r\n            {\r\n              Header: \"Name\",\r\n              columns: [\r\n                {\r\n                  Header: \"First Name\",\r\n                  accessor: \"firstName\"\r\n                },\r\n                {\r\n                  Header: \"Last Name\",\r\n                  id: \"lastName\",\r\n                  accessor: d => d.lastName\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              Header: \"Info\",\r\n              columns: [\r\n                {\r\n                  Header: \"Age\",\r\n                  accessor: \"age\"\r\n                },\r\n                {\r\n                  Header: \"Status\",\r\n                  accessor: \"status\"\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              Header: 'Stats',\r\n              columns: [\r\n                {\r\n                  Header: \"Visits\",\r\n                  accessor: \"visits\"\r\n                }\r\n              ]\r\n            }\r\n          ]}\r\n          defaultPageSize={10}\r\n          className=\"-striped -highlight\"\r\n        />\r\n        <br />\r\n        <Tips />\r\n        <Logo />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nasync function  fetchGithub(url,query,auth) {\r\n\r\nlet res;\r\n  try {\r\n    res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { \r\n        'Authorization': 'Bearer ' + auth,\r\n        'Content-Type': 'application/json'     \r\n      },\r\n      body: JSON.stringify({ query: query }),\r\n    })\r\n  } catch (err) {\r\n    console.log('Http error', err)\r\n    return res.status(500).send()\r\n  }\r\n  \r\n  res = await res.json()\r\n  var values = await res.data.user.repositories.nodes\r\n  console.log(values) \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}