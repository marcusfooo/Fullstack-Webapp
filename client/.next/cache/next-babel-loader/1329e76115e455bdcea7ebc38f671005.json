{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Marcus\\\\Desktop\\\\Projects\\\\Website\\\\client\\\\components\\\\ProjectTable.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Table } from 'reactstrap';\nimport fetch from 'isomorphic-unfetch';\nimport ReactTable from \"react-table\";\n\nclass ProjectTable extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: []\n    };\n  }\n\n  async componentDidMount() {\n    const query = `\n    query {\n      user(login: \"marcusfooo\") {\n        repositories(first: 100, isFork: false) {\n          nodes {\n            name\n            description\n            url\n          }\n        }\n      }\n    }\n    `;\n    const url = \"https://api.github.com/graphql\";\n    const auth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\";\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer ' + auth,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: query\n        })\n      });\n      const json = await response.json();\n      this.setState({\n        data: json.data.user.repositories.nodes\n      });\n\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    console.log(this.state.data);\n    const data = [{\n      name: 'a',\n      description: 'b',\n      language: 'c'\n    }];\n    const columns = [{\n      Header: 'Name',\n      accessor: 'name'\n    }, {\n      Header: 'Description',\n      accessor: 'description'\n    }, {\n      Header: 'Language',\n      accessor: 'language'\n    }];\n    return __jsx(ReactTable, {\n      data: data,\n      column: columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default ProjectTable;","map":{"version":3,"sources":["C:/Users/Marcus/Desktop/Projects/Website/client/components/ProjectTable.js"],"names":["React","Table","fetch","ReactTable","ProjectTable","Component","constructor","state","data","componentDidMount","query","url","auth","response","method","headers","body","JSON","stringify","json","setState","user","repositories","nodes","ok","Error","statusText","error","console","log","render","name","description","language","columns","Header","accessor"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AAGA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA0C;AACxCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAb;AACD;;AAED,QAAMC,iBAAN,GAA0B;AACxB,UAAMC,KAAK,GAAI;;;;;;;;;;;;KAAf;AAaF,UAAMC,GAAG,GAAG,gCAAZ;AACA,UAAMC,IAAI,GAAG,0CAAb;;AACE,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACS,GAAD,EAAM;AAChCG,QAAAA,MAAM,EAAE,MADwB;AAEhCC,QAAAA,OAAO,EAAE;AACP,2BAAiB,YAAYH,IADtB;AAEP,0BAAgB;AAFT,SAFuB;AAMhCI,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,UAAAA,KAAK,EAAEA;AAAT,SAAf;AAN0B,OAAN,CAA5B;AASA,YAAMS,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAnB;AACA,WAAKC,QAAL,CAAc;AAAEZ,QAAAA,IAAI,EAAEW,IAAI,CAACX,IAAL,CAAUa,IAAV,CAAeC,YAAf,CAA4BC;AAApC,OAAd;;AACA,UAAI,CAACV,QAAQ,CAACW,EAAd,EAAkB;AAChB,cAAMC,KAAK,CAACZ,QAAQ,CAACa,UAAV,CAAX;AACD;AACF,KAfD,CAeE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACJ;;AACCG,EAAAA,MAAM,GAAG;AACPF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKtB,KAAL,CAAWC,IAAvB;AACA,UAAMA,IAAI,GAAG,CAAC;AACZuB,MAAAA,IAAI,EAAE,GADM;AAEZC,MAAAA,WAAW,EAAE,GAFD;AAGZC,MAAAA,QAAQ,EAAE;AAHE,KAAD,CAAb;AAMA,UAAMC,OAAO,GAAG,CAAC;AACbC,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,QAAQ,EAAE;AAFG,KAAD,EAId;AACED,MAAAA,MAAM,EAAE,aADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KAJc,EAQd;AACED,MAAAA,MAAM,EAAE,UADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KARc,CAAhB;AAcA,WAAQ,MAAC,UAAD;AAAY,MAAA,IAAI,EAAG5B,IAAnB;AAAyB,MAAA,MAAM,EAAG0B,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AAED;;AAjEuC;;AAqE1C,eAAe9B,YAAf","sourcesContent":["import React from 'react';\r\nimport { Table } from 'reactstrap';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport ReactTable from \"react-table\";\r\n\r\n\r\nclass ProjectTable extends React.Component{\r\n  constructor() {\r\n    super();\r\n    this.state = { data: []};\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const query = `\r\n    query {\r\n      user(login: \"marcusfooo\") {\r\n        repositories(first: 100, isFork: false) {\r\n          nodes {\r\n            name\r\n            description\r\n            url\r\n          }\r\n        }\r\n      }\r\n    }\r\n    `;\r\n  const url = \"https://api.github.com/graphql\";\r\n  const auth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\"\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Authorization': 'Bearer ' + auth,\r\n          'Content-Type': 'application/json'     \r\n        },\r\n        body: JSON.stringify({ query: query }),\r\n      });\r\n\r\n      const json = await response.json();\r\n      this.setState({ data: json.data.user.repositories.nodes });\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n}\r\n  render() {\r\n    console.log(this.state.data)\r\n    const data = [{\r\n      name: 'a',\r\n      description: 'b',\r\n      language: 'c'\r\n    }]\r\n\r\n    const columns = [{\r\n        Header: 'Name',\r\n        accessor: 'name'\r\n      },\r\n      {\r\n        Header: 'Description',\r\n        accessor: 'description'\r\n      },\r\n      {\r\n        Header: 'Language',\r\n        accessor: 'language'\r\n      }\r\n    ]\r\n\r\n    return (<ReactTable data= {data} column= {columns}/>)\r\n  \r\n  }\r\n  \r\n}\r\n\r\nexport default ProjectTable;"]},"metadata":{},"sourceType":"module"}