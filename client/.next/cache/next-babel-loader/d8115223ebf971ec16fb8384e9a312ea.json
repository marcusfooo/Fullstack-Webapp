{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Marcus\\\\Desktop\\\\Projects\\\\Website\\\\client\\\\pages\\\\test.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\n\nvar Test = function Test(props) {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 3\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  }, \"Batman TV repos\"), props.repos.map(function (repo) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }\n    }, repo.name);\n  }));\n};\n\nTest.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.github.com/users/marcusfooo/repos'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            repos: data.map(function (entry) {\n              return entry.repo;\n            })\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Test;","map":{"version":3,"sources":["C:/Users/Marcus/Desktop/Projects/Website/client/pages/test.js"],"names":["fetch","Test","props","repos","map","repo","name","getInitialProps","res","json","data","console","log","length","entry"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK;AAAA,SAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEKA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,UAAAC,IAAI;AAAA,WACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,IAAI,CAACC,IAAT,CADmB;AAAA,GAApB,CAFL,CADgB;AAAA,CAAlB;;AASAL,IAAI,CAACM,eAAL,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACHP,KAAK,CAAC,+CAAD,CADF;;AAAA;AACfQ,UAAAA,GADe;AAAA;AAAA,2CAEFA,GAAG,CAACC,IAAJ,EAFE;;AAAA;AAEfC,UAAAA,IAFe;AAIrBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,MAA9C;AAJqB,2CAMd;AACLV,YAAAA,KAAK,EAAEO,IAAI,CAACN,GAAL,CAAS,UAAAU,KAAK;AAAA,qBAAIA,KAAK,CAACT,IAAV;AAAA,aAAd;AADF,WANc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAWA,eAAeJ,IAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\r\n\r\nconst Test = props => (\r\n  <div>\r\n    <h1>Batman TV repos</h1>\r\n      {props.repos.map(repo => (\r\n        <p>{repo.name}</p>\r\n        ))}\r\n</div>\r\n);\r\n\r\nTest.getInitialProps = async function() {\r\n  const res = await fetch('https://api.github.com/users/marcusfooo/repos');\r\n  const data = await res.json();\r\n\r\n  console.log(`Show data fetched. Count: ${data.length}`);\r\n\r\n  return {\r\n    repos: data.map(entry => entry.repo)\r\n  };\r\n};\r\n\r\nexport default Test;"]},"metadata":{},"sourceType":"module"}