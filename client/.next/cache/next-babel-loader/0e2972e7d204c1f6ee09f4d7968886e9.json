{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Marcus\\\\Desktop\\\\Projects\\\\Website\\\\client\\\\components\\\\ProjectTable.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { Table } from 'reactstrap';\nimport fetch from 'isomorphic-unfetch';\nimport ReactTable from \"react-table\";\nimport { render } from \"react-dom\";\n\nvar ProjectTable = /*#__PURE__*/function (_React$Component) {\n  _inherits(ProjectTable, _React$Component);\n\n  var _super = _createSuper(ProjectTable);\n\n  function ProjectTable() {\n    var _this;\n\n    _classCallCheck(this, ProjectTable);\n\n    _this = _super.call(this);\n    _this.state = {\n      data: []\n    };\n    _this.loadData = _this.loadData.bind(_assertThisInitialized(_this));\n\n    _this.loadData();\n\n    return _this;\n  }\n\n  _createClass(ProjectTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.loadData();\n      var query = \"\\n    query {\\n      user(login: \\\"marcusfooo\\\") {\\n        repositories(first: 100, isFork: false) {\\n          nodes {\\n            name\\n            description\\n            url\\n            primaryLanguage {name}\\n          }\\n        }\\n      }\\n    }\\n    \";\n      var url = \"https://api.github.com/graphql\";\n      var auth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\";\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer ' + auth,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: query\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        return _this2.setState({\n          data: res.data.user.repositories.nodes\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = this.state.data;\n      console.log(data);\n      var columns = [{\n        Header: 'Name',\n        accessor: 'name'\n      }, {\n        Header: 'Description',\n        accessor: 'description'\n      }, {\n        Header: 'Language',\n        accessor: 'language'\n      }];\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }\n      }, __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }, \"hi\"));\n    }\n  }]);\n\n  return ProjectTable;\n}(React.Component);\n\nexport default ProjectTable;","map":{"version":3,"sources":["C:/Users/Marcus/Desktop/Projects/Website/client/components/ProjectTable.js"],"names":["React","Table","fetch","ReactTable","render","ProjectTable","state","data","loadData","bind","query","url","auth","method","headers","body","JSON","stringify","then","res","json","setState","user","repositories","nodes","console","log","columns","Header","accessor","Component"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;;IAIMC,Y;;;;;AACJ,0BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAb;AACA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,+BAAhB;;AACA,UAAKD,QAAL;;AAJY;AAKb;;;;wCAEmB;AAAA;;AAClB,WAAKA,QAAL;AACA,UAAME,KAAK,2QAAX;AAcF,UAAMC,GAAG,GAAG,gCAAZ;AACA,UAAMC,IAAI,GAAG,0CAAb;AACAV,MAAAA,KAAK,CAACS,GAAD,EAAM;AACTE,QAAAA,MAAM,EAAE,MADC;AAETC,QAAAA,OAAO,EAAE;AACP,2BAAiB,YAAYF,IADtB;AAEP,0BAAgB;AAFT,SAFA;AAOTG,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,UAAAA,KAAK,EAAEA;AAAT,SAAf;AAPG,OAAN,CAAL,CASGQ,IATH,CASQ,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OATX,EAUGF,IAVH,CAUQ,UAAAC,GAAG;AAAA,eAAI,MAAI,CAACE,QAAL,CAAc;AAACd,UAAAA,IAAI,EAAEY,GAAG,CAACZ,IAAJ,CAASe,IAAT,CAAcC,YAAd,CAA2BC;AAAlC,SAAd,CAAJ;AAAA,OAVX;AAYD;;;6BACU;AACP,UAAMjB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAYnB,IAAZ;AAEA,UAAMoB,OAAO,GAAG,CAAC;AACfC,QAAAA,MAAM,EAAE,MADO;AAEfC,QAAAA,QAAQ,EAAE;AAFK,OAAD,EAIhB;AACED,QAAAA,MAAM,EAAE,aADV;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OAJgB,EAQhB;AACED,QAAAA,MAAM,EAAE,UADV;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OARgB,CAAhB;AAYA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,CADF;AAMD;;;;EA7DwB7B,KAAK,CAAC8B,S;;AAiEjC,eAAezB,YAAf","sourcesContent":["import React from 'react';\r\nimport { Table } from 'reactstrap';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport ReactTable from \"react-table\";\r\nimport { render } from \"react-dom\";\r\n\r\n\r\n\r\nclass ProjectTable extends React.Component{\r\n  constructor() {\r\n    super();\r\n    this.state = { data: []};\r\n    this.loadData = this.loadData.bind(this);\r\n    this.loadData()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadData()\r\n    const query = `\r\n    query {\r\n      user(login: \"marcusfooo\") {\r\n        repositories(first: 100, isFork: false) {\r\n          nodes {\r\n            name\r\n            description\r\n            url\r\n            primaryLanguage {name}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    `;\r\n  const url = \"https://api.github.com/graphql\";\r\n  const auth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\"\r\n  fetch(url, {\r\n    method: 'POST',\r\n    headers: { \r\n      'Authorization': 'Bearer ' + auth,\r\n      'Content-Type': 'application/json'\r\n      \r\n    },\r\n    body: JSON.stringify({ query: query }),\r\n  })\r\n    .then(res => res.json())\r\n    .then(res => this.setState({data: res.data.user.repositories.nodes}))\r\n\r\n}\r\n  render() {\r\n    const data = this.state.data\r\n    console.log(data)\r\n    \r\n    const columns = [{\r\n      Header: 'Name',\r\n      accessor: 'name'\r\n    },\r\n    {\r\n      Header: 'Description',\r\n      accessor: 'description'\r\n    },\r\n    {\r\n      Header: 'Language',\r\n      accessor: 'language'\r\n    }]\r\n    return (\r\n      <div>\r\n      <h1>hi</h1>\r\n      </div>\r\n      \r\n  );\r\n  }\r\n  \r\n}\r\n\r\nexport default ProjectTable;"]},"metadata":{},"sourceType":"module"}