{"ast":null,"code":"require('isomorphic-fetch');\n\nvar values = [];\nconst query = `\nquery {\n  user(login: \"marcusfooo\") {\n    repositories(first: 100, isFork: false) {\n      nodes {\n        name\n        description\n        url\n        primaryLanguage {name}\n      }\n    }\n  }\n}\n`;\nconst url = \"https://api.github.com/graphql\";\nauth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\";\nvar values = [];\n\nasync function fetchGithub(url, query, auth) {\n  var res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Bearer ' + auth,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: query\n    })\n  });\n  console.log(res);\n  var res = await res.json();\n\n  for (var i = 0; i < res.data.user.repositories.nodes.length; i++) {\n    values.push([res[i].name, res[i].description, res[i].url, res[i].primaryLanguage]);\n  }\n\n  console.log(values);\n}\n\nmodule.exports = {\n  fetchGithub,\n  url,\n  query,\n  auth\n};","map":{"version":3,"sources":["C:/Users/Marcus/Desktop/Projects/Website/client/components/Table/FetchGithub.js"],"names":["require","values","query","url","auth","fetchGithub","res","fetch","method","headers","body","JSON","stringify","console","log","json","i","data","user","repositories","nodes","length","push","name","description","primaryLanguage","module","exports"],"mappings":"AAAAA,OAAO,CAAC,kBAAD,CAAP;;AAEA,IAAIC,MAAM,GAAG,EAAb;AAEA,MAAMC,KAAK,GAAI;;;;;;;;;;;;;CAAf;AAeA,MAAMC,GAAG,GAAG,gCAAZ;AACAC,IAAI,GAAG,0CAAP;AACA,IAAIH,MAAM,GAAG,EAAb;;AACA,eAAgBI,WAAhB,CAA4BF,GAA5B,EAAgCD,KAAhC,EAAsCE,IAAtC,EAA4C;AAC1C,MAAIE,GAAG,GAAG,MAAMC,KAAK,CAACJ,GAAD,EAAM;AACzBK,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,OAAO,EAAE;AACP,uBAAiB,YAAYL,IADtB;AAEP,sBAAgB;AAFT,KAFgB;AAMzBM,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEV,MAAAA,KAAK,EAAEA;AAAT,KAAf;AANmB,GAAN,CAArB;AAQAW,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AACA,MAAIA,GAAG,GAAG,MAAMA,GAAG,CAACS,IAAJ,EAAhB;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAEV,GAAG,CAACW,IAAJ,CAASC,IAAT,CAAcC,YAAd,CAA2BC,KAA3B,CAAiCC,MAAjD,EAAyDL,CAAC,EAA1D,EAA8D;AAC5Df,IAAAA,MAAM,CAACqB,IAAP,CAAY,CAAChB,GAAG,CAACU,CAAD,CAAH,CAAOO,IAAR,EAAajB,GAAG,CAACU,CAAD,CAAH,CAAOQ,WAApB,EAAgClB,GAAG,CAACU,CAAD,CAAH,CAAOb,GAAvC,EAA2CG,GAAG,CAACU,CAAD,CAAH,CAAOS,eAAlD,CAAZ;AACD;;AACDZ,EAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AAED;;AAGDyB,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,WADe;AAEfF,EAAAA,GAFe;AAGfD,EAAAA,KAHe;AAIfE,EAAAA;AAJe,CAAjB","sourcesContent":["require('isomorphic-fetch');\r\n\r\nvar values = []\r\n\r\nconst query = `\r\nquery {\r\n  user(login: \"marcusfooo\") {\r\n    repositories(first: 100, isFork: false) {\r\n      nodes {\r\n        name\r\n        description\r\n        url\r\n        primaryLanguage {name}\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst url = \"https://api.github.com/graphql\";\r\nauth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\"\r\nvar values = []\r\nasync function  fetchGithub(url,query,auth) {\r\n  var res = await fetch(url, {\r\n    method: 'POST',\r\n    headers: { \r\n      'Authorization': 'Bearer ' + auth,\r\n      'Content-Type': 'application/json'     \r\n    },\r\n    body: JSON.stringify({ query: query }),\r\n  })\r\n  console.log(res)\r\n  var res = await res.json()\r\n  for(var i=0; i< res.data.user.repositories.nodes.length; i++) {\r\n    values.push([res[i].name,res[i].description,res[i].url,res[i].primaryLanguage]);\r\n  }\r\n  console.log(values)  \r\n    \r\n}\r\n\r\n\r\nmodule.exports = {\r\n  fetchGithub,\r\n  url,\r\n  query,\r\n  auth\r\n}"]},"metadata":{},"sourceType":"script"}