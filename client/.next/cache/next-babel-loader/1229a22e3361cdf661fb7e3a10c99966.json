{"ast":null,"code":"require('isomorphic-fetch');\n\nvar values = [];\nconst query = `\nquery {\n  user(login: \"marcusfooo\") {\n    repositories(first: 100, isFork: false) {\n      nodes {\n        name\n        description\n        url\n        primaryLanguage {name}\n      }\n    }\n  }\n}\n`;\nconst url = \"https://api.github.com/graphql\";\nauth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\";\nvar values = [];\n\nasync function fetchGithub(url, query, auth) {\n  let res;\n\n  try {\n    res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Bearer ' + auth,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: query\n      })\n    });\n  } catch (err) {\n    console.log('Http error', err);\n    return res.status(500).send();\n  }\n\n  res = await res.json();\n  var values = await res.data.user.repositories.nodes;\n  return values;\n}\n\nmodule.exports = {\n  fetchGithub,\n  url,\n  query,\n  auth\n};","map":{"version":3,"sources":["C:/Users/Marcus/Desktop/Projects/Website/client/components/Table/FetchGithub.js"],"names":["require","values","query","url","auth","fetchGithub","res","fetch","method","headers","body","JSON","stringify","err","console","log","status","send","json","data","user","repositories","nodes","module","exports"],"mappings":"AAAAA,OAAO,CAAC,kBAAD,CAAP;;AAEA,IAAIC,MAAM,GAAG,EAAb;AAEA,MAAMC,KAAK,GAAI;;;;;;;;;;;;;CAAf;AAeA,MAAMC,GAAG,GAAG,gCAAZ;AACAC,IAAI,GAAG,0CAAP;AACA,IAAIH,MAAM,GAAG,EAAb;;AACA,eAAgBI,WAAhB,CAA4BF,GAA5B,EAAgCD,KAAhC,EAAsCE,IAAtC,EAA4C;AAC5C,MAAIE,GAAJ;;AAEE,MAAI;AACFA,IAAAA,GAAG,GAAG,MAAMC,KAAK,CAACJ,GAAD,EAAM;AACrBK,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,OAAO,EAAE;AACP,yBAAiB,YAAYL,IADtB;AAEP,wBAAgB;AAFT,OAFY;AAMrBM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEV,QAAAA,KAAK,EAAEA;AAAT,OAAf;AANe,KAAN,CAAjB;AAQD,GATD,CASE,OAAOW,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,GAA1B;AACA,WAAOP,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAAP;AACD;;AAEDX,EAAAA,GAAG,GAAG,MAAMA,GAAG,CAACY,IAAJ,EAAZ;AACA,MAAIjB,MAAM,GAAG,MAAMK,GAAG,CAACa,IAAJ,CAASC,IAAT,CAAcC,YAAd,CAA2BC,KAA9C;AACA,SAAOrB,MAAP;AACD;;AAEDsB,MAAM,CAACC,OAAP,GAAiB;AACfnB,EAAAA,WADe;AAEfF,EAAAA,GAFe;AAGfD,EAAAA,KAHe;AAIfE,EAAAA;AAJe,CAAjB","sourcesContent":["require('isomorphic-fetch');\r\n\r\nvar values = []\r\n\r\nconst query = `\r\nquery {\r\n  user(login: \"marcusfooo\") {\r\n    repositories(first: 100, isFork: false) {\r\n      nodes {\r\n        name\r\n        description\r\n        url\r\n        primaryLanguage {name}\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst url = \"https://api.github.com/graphql\";\r\nauth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\"\r\nvar values = []\r\nasync function  fetchGithub(url,query,auth) {\r\nlet res;\r\n\r\n  try {\r\n    res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { \r\n        'Authorization': 'Bearer ' + auth,\r\n        'Content-Type': 'application/json'     \r\n      },\r\n      body: JSON.stringify({ query: query }),\r\n    })\r\n  } catch (err) {\r\n    console.log('Http error', err)\r\n    return res.status(500).send()\r\n  }\r\n  \r\n  res = await res.json()\r\n  var values = await res.data.user.repositories.nodes\r\n  return values  \r\n}\r\n\r\nmodule.exports = {\r\n  fetchGithub,\r\n  url,\r\n  query,\r\n  auth\r\n}"]},"metadata":{},"sourceType":"script"}