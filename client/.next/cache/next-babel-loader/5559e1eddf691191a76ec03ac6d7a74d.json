{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nrequire('isomorphic-fetch');\n\nvar values = [];\nvar query = \"\\nquery {\\n  user(login: \\\"marcusfooo\\\") {\\n    repositories(first: 100, isFork: false) {\\n      nodes {\\n        name\\n        description\\n        url\\n        primaryLanguage {name}\\n      }\\n    }\\n  }\\n}\\n\";\nvar url = \"https://api.github.com/graphql\";\nauth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1\";\nvar values = [];\n\nfunction fetchGithub(url, query, auth) {\n  var res, values;\n  return _regeneratorRuntime.async(function fetchGithub$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(url, {\n            method: 'POST',\n            headers: {\n              'Authorization': 'Bearer ' + auth,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              query: query\n            })\n          }));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 10;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('Http error', _context.t0);\n          return _context.abrupt(\"return\", res.status(500).send());\n\n        case 10:\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 12:\n          res = _context.sent;\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(res.data.user.repositories.nodes);\n\n        case 15:\n          values = _context.sent;\n          console.log(values);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nmodule.exports = {\n  fetchGithub: fetchGithub,\n  url: url,\n  query: query,\n  auth: auth\n};","map":{"version":3,"sources":["C:/Users/Marcus/Desktop/Projects/Website/client/components/Table/FetchGithub.js"],"names":["require","values","query","url","auth","fetchGithub","fetch","method","headers","body","JSON","stringify","res","console","log","status","send","json","data","user","repositories","nodes","module","exports"],"mappings":";;AAAAA,OAAO,CAAC,kBAAD,CAAP;;AAEA,IAAIC,MAAM,GAAG,EAAb;AAEA,IAAMC,KAAK,uNAAX;AAeA,IAAMC,GAAG,GAAG,gCAAZ;AACAC,IAAI,GAAG,yCAAP;AACA,IAAIH,MAAM,GAAG,EAAb;;AACA,SAAgBI,WAAhB,CAA4BF,GAA5B,EAAgCD,KAAhC,EAAsCE,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAIgBE,KAAK,CAACH,GAAD,EAAM;AACrBI,YAAAA,MAAM,EAAE,MADa;AAErBC,YAAAA,OAAO,EAAE;AACP,+BAAiB,YAAYJ,IADtB;AAEP,8BAAgB;AAFT,aAFY;AAMrBK,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,cAAAA,KAAK,EAAEA;AAAT,aAAf;AANe,WAAN,CAJrB;;AAAA;AAIIU,UAAAA,GAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaIC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAbJ,2CAcWF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,EAdX;;AAAA;AAAA;AAAA,2CAiBcJ,GAAG,CAACK,IAAJ,EAjBd;;AAAA;AAiBEL,UAAAA,GAjBF;AAAA;AAAA,2CAkBqBA,GAAG,CAACM,IAAJ,CAASC,IAAT,CAAcC,YAAd,CAA2BC,KAlBhD;;AAAA;AAkBMpB,UAAAA,MAlBN;AAmBEY,UAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;;AAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBAqB,MAAM,CAACC,OAAP,GAAiB;AACflB,EAAAA,WAAW,EAAXA,WADe;AAEfF,EAAAA,GAAG,EAAHA,GAFe;AAGfD,EAAAA,KAAK,EAALA,KAHe;AAIfE,EAAAA,IAAI,EAAJA;AAJe,CAAjB","sourcesContent":["require('isomorphic-fetch');\r\n\r\nvar values = []\r\n\r\nconst query = `\r\nquery {\r\n  user(login: \"marcusfooo\") {\r\n    repositories(first: 100, isFork: false) {\r\n      nodes {\r\n        name\r\n        description\r\n        url\r\n        primaryLanguage {name}\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst url = \"https://api.github.com/graphql\";\r\nauth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1\"\r\nvar values = []\r\nasync function  fetchGithub(url,query,auth) {\r\nlet res;\r\n\r\n  try {\r\n    res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { \r\n        'Authorization': 'Bearer ' + auth,\r\n        'Content-Type': 'application/json'     \r\n      },\r\n      body: JSON.stringify({ query: query }),\r\n    })\r\n  } catch (err) {\r\n    console.log('Http error', err)\r\n    return res.status(500).send()\r\n  }\r\n  \r\n  res = await res.json()\r\n  var values = await res.data.user.repositories.nodes\r\n  console.log(values) \r\n}\r\n\r\nmodule.exports = {\r\n  fetchGithub,\r\n  url,\r\n  query,\r\n  auth\r\n}"]},"metadata":{},"sourceType":"script"}