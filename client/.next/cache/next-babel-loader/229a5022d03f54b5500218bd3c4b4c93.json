{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { Table } from 'reactstrap';\nimport fetch from 'isomorphic-unfetch';\n\nvar ProjectTable = /*#__PURE__*/function (_React$Component) {\n  _inherits(ProjectTable, _React$Component);\n\n  var _super = _createSuper(ProjectTable);\n\n  function ProjectTable() {\n    var _this;\n\n    _classCallCheck(this, ProjectTable);\n\n    _this = _super.call(this);\n    _this.state = {\n      data: [{\n        name: \"\",\n        description: \"\",\n        language: \"\"\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(ProjectTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var query, url, auth, response, json;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = \"\\n    query {\\n      user(login: \\\"marcusfooo\\\") {\\n        repositories(first: 100, isFork: false) {\\n          nodes {\\n            name\\n            description\\n            url\\n            primaryLanguage {name}\\n          }\\n        }\\n      }\\n    }\\n    \";\n              url = \"https://api.github.com/graphql\";\n              auth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\";\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(fetch(url, {\n                method: 'POST',\n                headers: {\n                  'Authorization': 'Bearer ' + auth,\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  query: query\n                })\n              }));\n\n            case 6:\n              response = _context.sent;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              json = _context.sent;\n\n              if (json.data.user.repositories.nodes != null) {\n                this.setState({\n                  data: json.data.user.repositories.nodes\n                });\n              }\n\n              if (response.ok) {\n                _context.next = 13;\n                break;\n              }\n\n              throw Error(response.statusText);\n\n            case 13:\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](3);\n              console.log(_context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[3, 15]], Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = this.state.data;\n    }\n  }]);\n\n  return ProjectTable;\n}(React.Component);\n\nexport default ProjectTable;","map":{"version":3,"sources":["C:/Users/Marcus/Desktop/Projects/Website/client/components/ProjectTable.js"],"names":["React","Table","fetch","ProjectTable","state","data","name","description","language","query","url","auth","method","headers","body","JSON","stringify","response","json","user","repositories","nodes","setState","ok","Error","statusText","console","log","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;IAGMC,Y;;;;;AACJ,0BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE,CAAC;AACpBC,QAAAA,IAAI,EAAE,EADc;AAEpBC,QAAAA,WAAW,EAAE,EAFO;AAGpBC,QAAAA,QAAQ,EAAE;AAHU,OAAD;AAAR,KAAb;AAFY;AAOb;;;;;;;;;;AAGOC,cAAAA,K;AAcFC,cAAAA,G,GAAM,gC;AACNC,cAAAA,I,GAAO,0C;;;+CAEcT,KAAK,CAACQ,GAAD,EAAM;AAChCE,gBAAAA,MAAM,EAAE,MADwB;AAEhCC,gBAAAA,OAAO,EAAE;AACP,mCAAiB,YAAYF,IADtB;AAEP,kCAAgB;AAFT,iBAFuB;AAMhCG,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,kBAAAA,KAAK,EAAEA;AAAT,iBAAf;AAN0B,eAAN,C;;;AAAtBQ,cAAAA,Q;;+CASaA,QAAQ,CAACC,IAAT,E;;;AAAbA,cAAAA,I;;AACN,kBAAIA,IAAI,CAACb,IAAL,CAAUc,IAAV,CAAeC,YAAf,CAA4BC,KAA5B,IAAmC,IAAvC,EAA6C;AAC3C,qBAAKC,QAAL,CAAc;AAAEjB,kBAAAA,IAAI,EAAEa,IAAI,CAACb,IAAL,CAAUc,IAAV,CAAeC,YAAf,CAA4BC;AAApC,iBAAd;AACD;;kBAEIJ,QAAQ,CAACM,E;;;;;oBACNC,KAAK,CAACP,QAAQ,CAACQ,UAAV,C;;;;;;;;;AAGbC,cAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;6BAGK;AACP,UAAMtB,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AAED;;;;EApDwBL,KAAK,CAAC4B,S;;AAwDjC,eAAezB,YAAf","sourcesContent":["import React from 'react';\r\nimport { Table } from 'reactstrap';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\n\r\nclass ProjectTable extends React.Component{\r\n  constructor() {\r\n    super();\r\n    this.state = { data: [{\r\n      name: \"\",\r\n      description: \"\",\r\n      language: \"\"\r\n    }]};\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const query = `\r\n    query {\r\n      user(login: \"marcusfooo\") {\r\n        repositories(first: 100, isFork: false) {\r\n          nodes {\r\n            name\r\n            description\r\n            url\r\n            primaryLanguage {name}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    `;\r\n  const url = \"https://api.github.com/graphql\";\r\n  const auth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\"\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Authorization': 'Bearer ' + auth,\r\n          'Content-Type': 'application/json'     \r\n        },\r\n        body: JSON.stringify({ query: query }),\r\n      });\r\n\r\n      const json = await response.json();\r\n      if (json.data.user.repositories.nodes!=null) {\r\n        this.setState({ data: json.data.user.repositories.nodes });\r\n      }\r\n      \r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n}\r\n  render() {\r\n    const data = this.state.data\r\n    \r\n  }\r\n  \r\n}\r\n\r\nexport default ProjectTable;"]},"metadata":{},"sourceType":"module"}