{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nrequire('isomorphic-fetch');\n\nvar values = [];\nvar query = \"\\nquery {\\n  user(login: \\\"marcusfooo\\\") {\\n    repositories(first: 100, isFork: false) {\\n      nodes {\\n        name\\n        description\\n        url\\n        primaryLanguage {name}\\n      }\\n    }\\n  }\\n}\\n\";\nvar url = \"https://api.github.com/graphql\";\nauth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\";\n\nfunction fetchGithub(url, query, auth) {\n  var res;\n  return _regeneratorRuntime.async(function fetchGithub$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url, {\n            method: 'POST',\n            headers: {\n              'Authorization': 'Bearer ' + auth,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              query: query\n            })\n          }));\n\n        case 2:\n          res = _context.sent;\n          console.log(res);\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          res = _context.sent;\n\n          (function (res) {\n            return res.data.user.repositories.nodes;\n          });\n\n          console.log(data);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports = {\n  fetchGithub: fetchGithub,\n  url: url,\n  query: query,\n  auth: auth\n};","map":{"version":3,"sources":["C:/Users/Marcus/Desktop/Projects/Website/client/components/Table/FetchGithub.js"],"names":["require","values","query","url","auth","fetchGithub","fetch","method","headers","body","JSON","stringify","res","console","log","json","data","user","repositories","nodes","module","exports"],"mappings":";;AAAAA,OAAO,CAAC,kBAAD,CAAP;;AAEA,IAAIC,MAAM,GAAG,EAAb;AAEA,IAAMC,KAAK,uNAAX;AAeA,IAAMC,GAAG,GAAG,gCAAZ;AACAC,IAAI,GAAG,0CAAP;;AAEA,SAAgBC,WAAhB,CAA4BF,GAA5B,EAAgCD,KAAhC,EAAsCE,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACkBE,KAAK,CAACH,GAAD,EAAM;AACzBI,YAAAA,MAAM,EAAE,MADiB;AAEzBC,YAAAA,OAAO,EAAE;AACP,+BAAiB,YAAYJ,IADtB;AAEP,8BAAgB;AAFT,aAFgB;AAMzBK,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,cAAAA,KAAK,EAAEA;AAAT,aAAf;AANmB,WAAN,CADvB;;AAAA;AACMU,UAAAA,GADN;AASEC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AATF;AAAA,2CAUkBA,GAAG,CAACG,IAAJ,EAVlB;;AAAA;AAUMH,UAAAA,GAVN;;AAWE,qBAAAA,GAAG;AAAA,mBAAIA,GAAG,CAACI,IAAJ,CAASC,IAAT,CAAcC,YAAd,CAA2BC,KAA/B;AAAA,WAAH;;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBAI,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,WAAW,EAAXA,WADe;AAEfF,EAAAA,GAAG,EAAHA,GAFe;AAGfD,EAAAA,KAAK,EAALA,KAHe;AAIfE,EAAAA,IAAI,EAAJA;AAJe,CAAjB","sourcesContent":["require('isomorphic-fetch');\r\n\r\nvar values = []\r\n\r\nconst query = `\r\nquery {\r\n  user(login: \"marcusfooo\") {\r\n    repositories(first: 100, isFork: false) {\r\n      nodes {\r\n        name\r\n        description\r\n        url\r\n        primaryLanguage {name}\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst url = \"https://api.github.com/graphql\";\r\nauth = \"fdb88caccccfab0e29dea3ee4843d6dd6fe48b1b\"\r\n\r\nasync function  fetchGithub(url,query,auth) {\r\n  var res = await fetch(url, {\r\n    method: 'POST',\r\n    headers: { \r\n      'Authorization': 'Bearer ' + auth,\r\n      'Content-Type': 'application/json'     \r\n    },\r\n    body: JSON.stringify({ query: query }),\r\n  })\r\n  console.log(res)\r\n  var res = await res.json()\r\n  res => res.data.user.repositories.nodes\r\n  console.log(data)  \r\n    \r\n}\r\n\r\n\r\nmodule.exports = {\r\n  fetchGithub,\r\n  url,\r\n  query,\r\n  auth\r\n}"]},"metadata":{},"sourceType":"script"}